[{"path":"https://docs.ropensci.org/lightr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to lightr","title":"Contributing to lightr","text":"many ways can contribute lightr. contributions much welcome require technical knowledge. something like contribute, sure , please don‚Äôt hesitate reach opening issue sending email.","code":""},{"path":"https://docs.ropensci.org/lightr/CONTRIBUTING.html","id":"Ô∏è-spreading-the-word","dir":"","previous_headings":"","what":"üó£Ô∏è Spreading the word","title":"Contributing to lightr","text":"easiest (possibly one useful) way can contribute lightr spreading word. Please cite publications tell friends colleagues !","code":""},{"path":"https://docs.ropensci.org/lightr/CONTRIBUTING.html","id":"Ô∏è-fixing-typos","dir":"","previous_headings":"","what":"‚úçÔ∏è Fixing typos","title":"Contributing to lightr","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. words, please edit .R file R/ folder, .Rd files man/ folder. package uses roxygen2 automatically rebuild .Rd files.","code":""},{"path":"https://docs.ropensci.org/lightr/CONTRIBUTING.html","id":"-contributing-test-files","dir":"","previous_headings":"","what":"üìÑ Contributing test files","title":"Contributing to lightr","text":"always looking new test files ensure lightr works expected everybody. spectrometry files willing share, please send email. least, check lightr parses correctly unusual features, ask agree add continuous integration test suite (GitHub CRAN).","code":""},{"path":"https://docs.ropensci.org/lightr/CONTRIBUTING.html","id":"-reporting-bugs","dir":"","previous_headings":"","what":"üò• Reporting bugs","title":"Contributing to lightr","text":"think found bug lightr, even ‚Äôre unsure, please let know. best way open issue GitHub: https://github.com/ropensci/lightr/issues. Please try create reprex minimal amount code required reproduce bug encountered. Please also include session info (e.g.¬†via R command sessioninfo::session_info()). Finally, issue relates parsing specific file, remember include said file.","code":""},{"path":"https://docs.ropensci.org/lightr/CONTRIBUTING.html","id":"-adding-or-requesting-new-parser","dir":"","previous_headings":"","what":"üÜï Adding or requesting new parser","title":"Contributing to lightr","text":"find file lightr open yet, please open issue send email example file. file formats complex guarantee able quickly provide parser least try.","code":""},{"path":"https://docs.ropensci.org/lightr/CONTRIBUTING.html","id":"Ô∏è-voting-for-new-features","dir":"","previous_headings":"","what":"üó≥Ô∏è Voting for new features","title":"Contributing to lightr","text":"Whenever can, open new issue upcoming plans lightr. particularly interested specific feature like help prioritise work, please use GitHub reactions feature.","code":""},{"path":"https://docs.ropensci.org/lightr/CONTRIBUTING.html","id":"-code-of-conduct","dir":"","previous_headings":"","what":"üìñ Code of Conduct","title":"Contributing to lightr","text":"Please note lightr released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/lightr/CONTRIBUTING.html","id":"for-authors-and-maintainers","dir":"","previous_headings":"","what":"For authors and maintainers","title":"Contributing to lightr","text":"private Google Drive shared folder contains documents shared confidence spectrometer manufacturers, make public. author ‚Äôd like get access drive, please email current package maintainer (hugo.gruson@normalesup.org) rOpenSci staff (info@ropensci.org).","code":""},{"path":"https://docs.ropensci.org/lightr/LICENSE.html","id":"gnu-general-public-license","dir":"","previous_headings":"","what":"GNU GENERAL PUBLIC LICENSE","title":"NA","text":"Version 2, June 1991","code":"Copyright (C) 1989, 1991 Free Software Foundation, Inc.   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA  Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed."},{"path":"https://docs.ropensci.org/lightr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"NA","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software‚Äìmake sure software free users. General Public License applies Free Software Foundation‚Äôs software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author‚Äôs protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors‚Äô reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone‚Äôs free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://docs.ropensci.org/lightr/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"NA","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. ‚ÄúProgram‚Äù, , refers program work, ‚Äúwork based Program‚Äù means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term ‚Äúmodification‚Äù.) licensee addressed ‚Äú‚Äù. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program‚Äôs source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients‚Äô exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies ‚Äúlater version‚Äù, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally. WARRANTY 11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM ‚Äú‚Äù WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/lightr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"NA","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least ‚Äúcopyright‚Äù line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands `show w‚Äô `show c‚Äô show appropriate parts General Public License. course, commands use may called something `show w‚Äô `show c‚Äô; even mouse-clicks menu items‚Äìwhatever suits program. also get employer (work programmer) school, , sign ‚Äúcopyright disclaimer‚Äù program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"one line to give the program's name and an idea of what it does. Copyright (C) yyyy  name of author  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.  This is free software, and you are welcome to redistribute it under certain conditions; type `show c'  for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written  by James Hacker.  signature of Ty Coon, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://docs.ropensci.org/lightr/articles/batch_import.html","id":"import-spectral-data-lr_get_spec","dir":"Articles","previous_headings":"","what":"Import spectral data: lr_get_spec()","title":"Batch import with `lr_get_spec()` and `lr_get_metadata()`","text":"lr_get_spec() one core functions lightr. finds spectral data files, extract reflectance / transmittance / absorbance data returns data.frame first column (named wl) contains wavelengths subsequent columns contain spectral data, interpolated every nanometre: lr_get_spec() also supports setting multiple file extensions passing character vector ext: Finally, lr_get_spec() can also recursively search folder tree subdir argument: may noticed, lr_get_spec() care file extension case default. can changed using ignore.case switch: input files sample wavelengths (case use spectrometer model recording software), can also get uninterpolated data, changing value interpolate boolean argument:","code":"res <- lr_get_spec(where = \"data\", ext = \"ttt\", lim = c(300, 700)) ## 2 files found; importing spectra: head(res) ##    wl avantes_export avantes_export_long ## 1 300         3.1487           13.624678 ## 2 301         3.1589            5.276307 ## 3 302         3.5700           11.023560 ## 4 303         3.9215           10.307208 ## 5 304         3.4034            8.980705 ## 6 305         3.7878            8.278200 res <- lr_get_spec(where = \"data\", ext = c(\"ttt\", \"trt\"), lim = c(300, 700)) ## 3 files found; importing spectra: ## Warning in value[[3L]](cond): need at least two non-NA values to interpolate ## Warning: Could not import one or more files: ## data/avantes_export2.trt head(res) ##    wl avantes_export avantes_export_long ## 1 300         3.1487           13.624678 ## 2 301         3.1589            5.276307 ## 3 302         3.5700           11.023560 ## 4 303         3.9215           10.307208 ## 5 304         3.4034            8.980705 ## 6 305         3.7878            8.278200 res <- lr_get_spec(where = \"data\", ext = \"procspec\", lim = c(300, 700), subdir = TRUE) ## 6 files found; importing spectra: head(res) ##    wl OceanOptics_Linux OceanOptics_Windows OceanOptics_badencode  whiteref ## 1 300          126.5502            3.199635             -6.905214  98.30193 ## 2 301          125.3005            3.420500             -7.034905  98.67972 ## 3 302          127.0825            3.224495             -7.656868  98.10391 ## 4 303          128.0483            3.320803             -8.577880 101.34410 ## 5 304          128.9909            3.407551             -9.182934  99.86908 ## 6 305          127.4218            3.492118             -9.367868 101.32638 ##   BR_PF26_1 BR_PF27_3 ## 1  19.35800  16.81450 ## 2  19.40243  16.69849 ## 3  19.42713  16.54195 ## 4  19.47335  16.47455 ## 5  19.48856  16.38495 ## 6  19.41967  16.31837 res <- lr_get_spec(where = \"data\", ext = \"procspec\", subdir = TRUE, ignore.case = FALSE) ## Warning: No files found. Try a different value for argument \"ext\". res <- lr_get_spec(where = file.path(\"data\", \"puffin\"), ext = \"procspec\", interpolate = FALSE) ## 2 files found; importing spectra: head(res) ##           wl BR_PF26_1 BR_PF27_3 ## 570 300.2031  19.36675  16.81240 ## 571 300.4172  19.38440  16.77861 ## 572 300.6313  19.39979  16.73853 ## 573 300.8454  19.38650  16.73391 ## 574 301.0594  19.40854  16.68488 ## 575 301.2734  19.40297  16.64210"},{"path":"https://docs.ropensci.org/lightr/articles/batch_import.html","id":"import-spectral-metadata-lr_get_metadata","dir":"Articles","previous_headings":"","what":"Import spectral metadata: lr_get_metadata()","title":"Batch import with `lr_get_spec()` and `lr_get_metadata()`","text":"lr_get_metadata() extracts metadata captured spectrophotometer recording. metadata reported scientific articles ensure reproducibility measurements ultimately findings. amount information strongly depends brand model spectrometer. Similarly lr_get_spec(), can handle multiple extensions perform recursive searches:","code":"res <- lr_get_metadata(where = \"data\", ext = c(\"trt\", \"procspec\"), subdir = TRUE) ## 7 files found; importing metadata: head(res) ##                    name       user            datetime  spec_model     spec_ID ## 1       avantes_export2       <NA>                <NA>        <NA>   1305084U1 ## 2     OceanOptics_Linux       hugo 2016-03-16 13:18:31     USB4000  USB4C00008 ## 3   OceanOptics_Windows doutrelant 2015-12-04 10:29:14      JazUSB    JAZA2982 ## 4 OceanOptics_badencode       user 2016-12-02 20:39:12 USB2000Plus USB2+H06330 ## 5              whiteref      gomez 2018-08-02 15:56:19     USB4000  USB4C00008 ## 6             BR_PF26_1 Adminlocal 2006-06-24 08:49:06     USB4000  USB4C00008 ##   white_inttime dark_inttime sample_inttime white_avgs dark_avgs sample_avgs ## 1            95           95             95         20        20          20 ## 2           200          200            200          5         5           5 ## 3            60           60             60         15        15          15 ## 4            20           20             20        100       100         100 ## 5           500          500            500          5         5           5 ## 6            10           10             10         40        40          40 ##   white_boxcar dark_boxcar sample_boxcar ## 1            1           1             1 ## 2            0           0             0 ## 3            0           0             0 ## 4            5           5             5 ## 5            0           0             0 ## 6           10          10            10"},{"path":"https://docs.ropensci.org/lightr/articles/batch_import.html","id":"convert-spectral-data-to-csv-lr_convert_tocsv","dir":"Articles","previous_headings":"","what":"Convert spectral data to csv: lr_convert_tocsv()","title":"Batch import with `lr_get_spec()` and `lr_get_metadata()`","text":"lr_convert_tocsv() designed users want open format version individual input file, possibly allowing carry analysis using another programming language software. works similar way lr_get_spec() create csv files file names input files (different extension).","code":"lr_convert_tocsv(where = \"data\", ext = \"procspec\", subdir = TRUE)"},{"path":"https://docs.ropensci.org/lightr/articles/renormalise.html","id":"step-1-import-un-normalised-data","dir":"Articles","previous_headings":"","what":"Step 1: import un-normalised data","title":"Renormalise spectral data with a custom reference","text":"manually import data using appropriate low-level parser: result contains 2 elements: spectral data metadata captured recording","code":"reflect_data <- lr_parse_procspec(   system.file(\"testdata\", \"procspec_files\", \"OceanOptics_Linux.ProcSpec\",                package = \"lightr\")   ) length(reflect_data) ## [1] 2 head(reflect_data[[1]]) ##         wl      dark     white     scope processed ## 1 176.3604 32822.795 32822.795 32822.795   0.00000 ## 2 176.5816 32822.795 32822.795 32822.795   0.00000 ## 3 176.8027 32822.795 32822.795 32822.795   0.00000 ## 4 177.0238  1483.549  1517.545  1496.656  38.55422 ## 5 177.2449  1492.150  1506.486  1510.991 131.42857 ## 6 177.4660  1965.640  1934.102  1976.290 -33.76623"},{"path":"https://docs.ropensci.org/lightr/articles/renormalise.html","id":"step-2-find-the-matching-white-reference","dir":"Articles","previous_headings":"","what":"Step 2: find the matching white reference","title":"Renormalise spectral data with a custom reference","text":"import white reference way:","code":"white_data <- lr_parse_procspec(   system.file(\"testdata\", \"procspec_files\", \"whiteref.ProcSpec\",                package = \"lightr\") )"},{"path":"https://docs.ropensci.org/lightr/articles/renormalise.html","id":"step-3-normalise-the-reflectance-data","dir":"Articles","previous_headings":"","what":"Step 3: normalise the reflectance data","title":"Renormalise spectral data with a custom reference","text":"can now normalise reflectance spectrum equation stated beginning vignette: Processed=Raw-DarkWhite-Dark first, verify integration times: can now get rid metadata part focus data : last step able normalise data, also need check reflectance spectrum white reference sampled wavelengths:","code":"reflect_data <- data.frame(reflect_data[[1]]) white_data <- data.frame(white_data[[1]]) all.equal(reflect_data$wl, white_data$wl) ## [1] TRUE res <- (reflect_data$scope - reflect_data$dark) / (white_data$white - white_data$dark) head(res) ## [1]        NaN        NaN        NaN -5.3333333 46.0000000  0.6190476"},{"path":"https://docs.ropensci.org/lightr/articles/true_example.html","id":"comparison-of-outputs","dir":"Articles","previous_headings":"","what":"Comparison of outputs","title":"Real life example","text":"default, OceanInsight spectrometers produce .ProcSpec files, R readily import. help , OceanInsight official software, SpectraSuite conversion feature, turns .ProcSpec files tab separated values files (.txt). , let‚Äôs start comparing .ProcSpec spectra imported lightr .txt files produced OceanOptics. can visually inspect two file using dedicated S3 function pavo::plot.rspec():  Spectra imported lightr converted SpectraSuite look pretty similar upon visual inspection can confirm ","code":"raw_files <- lr_get_spec(file.path(\"data\", \"puffin\"), ext = \"ProcSpec\") #> 2 files found; importing spectra: txt_files <- lr_get_spec(file.path(\"data\", \"puffin\"), ext = \"txt\") #> 2 files found; importing spectra: library(pavo) plot(raw_files, main = \"Raw ProSpec files\") plot(txt_files, main = \"Exported txt files\") all.equal(raw_files, txt_files, tol = 1e-4) #> [1] TRUE"},{"path":"https://docs.ropensci.org/lightr/articles/true_example.html","id":"example-of-analysis","dir":"Articles","previous_headings":"","what":"Example of analysis","title":"Real life example","text":"One possibly biologically relevant question look interspecific variability beak colour. .e., puffin individuals roughly colour individuals brighter, colourful others? , look difference hue brightness red part beak two individuals, pavo::summary.rspec() function (smoothing pavo::procspec()): Okay, two individuals seem differ quite lot terms hue brightness. Now, one might ask difference can perceived bird vision. can test pavo::coldist() function. values dS dL 1 JND (just noticeable differences) threshold, means colour two individuals, spite difference, looks birds.","code":"beak <- procspec(raw_files, opt = \"smooth\") #> processing options applied: #> smoothing spectra with a span of 0.25 summary(beak, subset = c(\"B2\", \"H5\")) #>                 B2  H5 #> BR_PF26_1 26.23823 569 #> BR_PF27_3 21.78785 581 vis_beak <- vismodel(beak, visual = \"avg.uv\", achromatic = \"ch.dc\") tcs_beak <- colspace(vis_beak) coldist(tcs_beak, achromatic = TRUE) #> Quantum catch are relative, distances may not be meaningful #> Calculating unweighted Euclidean distances and Weber luminance contrast #>      patch1    patch2          dS        dL #> 1 BR_PF26_1 BR_PF27_3 0.005867583 0.2004935"},{"path":"https://docs.ropensci.org/lightr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hugo Gruson. Maintainer, author, copyright holder. Rafael Maia. Author, copyright holder. Thomas White. Author, copyright holder. Kotya Karapetyan. Contributor, copyright holder.            Author MATLAB script read AvaSoft7 binary files (CC-)","code":""},{"path":"https://docs.ropensci.org/lightr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gruson H, White T, Maia R (2019). ‚Äúlightr: import spectral data metadata R.‚Äù Journal Open Source Software, 4(43), 1857. doi:10.21105/joss.01857, https://doi.org/10.21105/joss.01857.","code":"@Article{,   doi = {10.21105/joss.01857},   url = {https://doi.org/10.21105/joss.01857},   year = {2019},   publisher = {The Open Journal},   volume = {4},   number = {43},   pages = {1857},   author = {Hugo Gruson and Thomas White and Rafael Maia},   title = {lightr: import spectral data and metadata in R},   journal = {Journal of Open Source Software}, }"},{"path":"https://docs.ropensci.org/lightr/index.html","id":"lightr-import-spectral-data-in-r-","dir":"","previous_headings":"","what":"Read Spectrometric Data and Metadata in R","title":"Read Spectrometric Data and Metadata in R","text":"standard file format spectrometry data different scientific instrumentation companies use wildly different formats store spectral data. Vendor proprietary software sometimes option convert formats instead human readable files csv process, metadata lost. However, metadata critical ensure reproducibility (White et al, 2015). package aims offering unified user-friendly interface users read UV-VIS reflectance/transmittance/absorbance spectra files various formats single line code. Additionally, provides first time fully free open source solution read proprietary spectra file formats systems.","code":""},{"path":"https://docs.ropensci.org/lightr/index.html","id":"-citation","dir":"","previous_headings":"","what":"üóü Citation","title":"Read Spectrometric Data and Metadata in R","text":"cite package publications, please use: Gruson H., White T.E., Maia R., (2019). lightr: import spectral data metadata R. Journal Open Source Software, 4(43), 1857, https://doi.org/10.21105/joss.01857","code":""},{"path":"https://docs.ropensci.org/lightr/index.html","id":"-installation","dir":"","previous_headings":"","what":"üîß Installation","title":"Read Spectrometric Data and Metadata in R","text":"can also install development version rOpenSci‚Äôs CRAN-like repository:","code":"install.packages(\"lightr\") install.packages(\"lightr\", repos = \"https://dev.ropensci.org\")"},{"path":"https://docs.ropensci.org/lightr/index.html","id":"-usage","dir":"","previous_headings":"","what":"üíª Usage","title":"Read Spectrometric Data and Metadata in R","text":"thorough documentation available package, using R usual syntax ?function help(function). However, users probably mainly use two functions: lr_get_spec() returns dataframe compatible pavo custom S3 class (rspec) can used analyses using colour vision models. supported file formats can also parsed using lr_parse_$extension() function $extension lowercase extension file. family functions return list first element data dataframe second element vector relevant metadata. exceptions .txt .Transmission files extensions generic. Users need figure parser appropriate case. lr_get_metadata() lr_get_spec() automatically try generic parsers case. Alternatively, may simply want convert spectra readable standard format carry analysis another software. case, can run:","code":"# Get a data.frame containing all useful metadata from spectra in a folder lr_get_metadata(where = system.file(\"testdata/procspec_files\",                                      package = \"lightr\"),                  ext = \"ProcSpec\") # Get a single dataframe where the first column contains the wavelengths and  # the next columns contain a spectra each (pavo's rspec class) lr_get_spec(where = system.file(\"testdata/procspec_files\", package = \"lightr\"),             ext = \"ProcSpec\") # Convert every single ProcSpec file to a csv file with the same name and  # location lr_convert_tocsv(where = system.file(\"testdata/procspec_files\",                                        package = \"lightr\"),                  ext = \"ProcSpec\")"},{"path":"https://docs.ropensci.org/lightr/index.html","id":"-supported-file-formats","dir":"","previous_headings":"","what":"‚úî Supported file formats","title":"Read Spectrometric Data and Metadata in R","text":"package still development currently supports (can click extension tables see example file format):","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/lightr/index.html","id":"others","dir":"","previous_headings":"‚úî Supported file formats","what":"Others","title":"Read Spectrometric Data and Metadata in R","text":"fallback, always try lr_parse_generic() offers flexible general algorithm manages extract data files. can‚Äôt find best parser specific file believe using unsupported format, please open issue send email.","code":""},{"path":"https://docs.ropensci.org/lightr/index.html","id":"-similar-projects","dir":"","previous_headings":"","what":"üåê Similar projects","title":"Read Spectrometric Data and Metadata in R","text":"lightr contains code initially forked pavo, namely lr_get_spec() function. code since refactored optimised speed. pavo differs lightr focus core functionalities. main strength pavo comprehensive user-friendly set functions analyse spectral data using colour vision models, lightr focuses data import step. photobiologyInOut also provides functions import spectral data. goal author provide complete pipeline spectral data import analysis using set tightly integrated R packages. however makes difficult use different tool given step process. contrary, lightr aims proposing light package limited dependencies focuses data import step process let user pick favourite tool analysis step (pavo, colourvision, Avicol, etc.). spectrolab knowledge, lightr gratis tool import complex file formats Avantes (ABS, ROH, TRM, RFL8) CRAIC (spc) binary files, OceanOptics .ProcSpec. user-friendly high-levels functions low dependency philosophy, lightr may also hopefully prove useful people working languages R.","code":""},{"path":"https://docs.ropensci.org/lightr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Read Spectrometric Data and Metadata in R","text":"plenty ways can contribute lightr. Please visit contributing guide. Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/dispatch_parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to dispatch files to the correct parser ‚Äî dispatch_parser","title":"Internal function to dispatch files to the correct parser ‚Äî dispatch_parser","text":"Internal function dispatch files correct parser","code":""},{"path":"https://docs.ropensci.org/lightr/reference/dispatch_parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to dispatch files to the correct parser ‚Äî dispatch_parser","text":"","code":"dispatch_parser(filename, decimal = \".\", sep = NULL, specnum = 1L)"},{"path":"https://docs.ropensci.org/lightr/reference/dispatch_parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to dispatch files to the correct parser ‚Äî dispatch_parser","text":"filename Path file parse specnum Integer representing position spectrum read file. option makes sense AvaSoft8 files ignored cases.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/dispatch_parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to dispatch files to the correct parser ‚Äî dispatch_parser","text":"named list two elements: data: dataframe columns \"wl\", \"dark\", \"white\", \"scope\" \"processed\", order. metadata: character vector metadata including: user: Name spectrometer operator datetime: Timestamp recording format '%Y-%m-%d %H:%M:%S' UTC timezone. timezone missing source file, UTC time assumed (reproducibility purposes across computers different localtimes). spec_model: Model spectrometer spec_ID: Unique ID spectrometer white_inttime: Integration time white reference (ms) dark_inttime: Integration time dark reference (ms) sample_inttime: Integration time sample (ms) white_avgs: Number averaged measurements white reference dark_avgs: Number averaged measurements dark reference sample_avgs: Number averaged measurements sample white_boxcar: Boxcar width white reference dark_boxcar: Boxcar width dark reference sample_boxcar: Boxcar width sample reference","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lightr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"lightr: Read Spectrometric Data and Metadata ‚Äî lightr-package","title":"lightr: Read Spectrometric Data and Metadata ‚Äî lightr-package","text":"Parse various reflectance/transmittance/absorbance spectra file formats extract spectral data metadata, described Gruson, White & Maia (2019) doi:10.21105/joss.01857 . Among formats, can import files 'Avantes' https://www.avantes.com/, 'CRAIC' https://www.microspectra.com/, 'OceanInsight' (formerly 'OceanOptics') https://www.oceaninsight.com/ brands.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/lightr/reference/lightr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"lightr: Read Spectrometric Data and Metadata ‚Äî lightr-package","text":"Maintainer: Hugo Gruson hugo.gruson+R@normalesup.org (ORCID) [copyright holder] Authors: Rafael Maia (ORCID) [copyright holder] Thomas White (ORCID) [copyright holder] contributors: Kotya Karapetyan (Author MATLAB script read AvaSoft7 binary files (CC-)) [contributor, copyright holder]","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_compute_processed.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute processed spectral data ‚Äî lr_compute_processed","title":"Compute processed spectral data ‚Äî lr_compute_processed","text":"Compute processed spectral data, raw count/scope data, counts dark reference, white reference.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_compute_processed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute processed spectral data ‚Äî lr_compute_processed","text":"","code":"lr_compute_processed(spdata)"},{"path":"https://docs.ropensci.org/lightr/reference/lr_compute_processed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute processed spectral data ‚Äî lr_compute_processed","text":"spdata data.frame containing spectral data columns 'scope', 'dark', 'white'","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_convert_tocsv.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert spectral data files to csv files ‚Äî lr_convert_tocsv","title":"Convert spectral data files to csv files ‚Äî lr_convert_tocsv","text":"Convert spectral data files csv files","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_convert_tocsv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert spectral data files to csv files ‚Äî lr_convert_tocsv","text":"","code":"lr_convert_tocsv(   where = NULL,   ext = \"txt\",   decimal = \".\",   sep = NULL,   subdir = FALSE,   ignore.case = TRUE,   overwrite = FALSE,   metadata = TRUE )"},{"path":"https://docs.ropensci.org/lightr/reference/lr_convert_tocsv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert spectral data files to csv files ‚Äî lr_convert_tocsv","text":"Folder files located (defaults current working directory). ext File extension searched , without \".\" (defaults txt). can also use character vector specify multiple file extensions. decimal Character used identify decimal plates (defaults .). sep Column delimiting characters considered addition default (: tab, space, \";\") subdir subdirectories within folder included search? (defaults FALSE). ignore.case extension search case insensitive? (defaults TRUE) overwrite logical. function overwrite existing files name? (defaults FALSE). metadata logical (defaults TRUE). metadata exported well? exported csv files _metadata.csv suffix.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_convert_tocsv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert spectral data files to csv files ‚Äî lr_convert_tocsv","text":"Convert input files csv invisibly return list created file paths","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_convert_tocsv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert spectral data files to csv files ‚Äî lr_convert_tocsv","text":"can customise type parallel processing used function future::plan() function. works operating systems, well high performance computing (HPC) environment. Similarly, can customise way progress shown progressr::handlers() functions (progress bar, acoustic feedback, nothing, etc.)","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_convert_tocsv.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Convert spectral data files to csv files ‚Äî lr_convert_tocsv","text":"metadata = TRUE, either data metadata export fails, nothing returned file.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract metadata from spectra files ‚Äî lr_get_metadata","title":"Extract metadata from spectra files ‚Äî lr_get_metadata","text":"Finds imports metadata spectra files given location.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract metadata from spectra files ‚Äî lr_get_metadata","text":"","code":"lr_get_metadata(   where = getwd(),   ext = \"ProcSpec\",   sep = NULL,   subdir = FALSE,   subdir.names = FALSE,   ignore.case = TRUE )"},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract metadata from spectra files ‚Äî lr_get_metadata","text":"Folder files located (defaults current working directory). ext File extension searched , without \".\" (defaults txt). can also use character vector specify multiple file extensions. sep Column delimiting characters considered addition default (: tab, space, \";\") subdir subdirectories within folder included search? (defaults FALSE). subdir.names subdirectory path included name spectra? (defaults FALSE). ignore.case extension search case insensitive? (defaults TRUE)","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract metadata from spectra files ‚Äî lr_get_metadata","text":"data.frame containing one file per row following columns: name: File name (without extension) user: Name spectrometer operator datetime: Timestamp recording (ISO 8601 format) spec_model: Model spectrometer spec_ID: Unique ID spectrometer white_inttime: Integration time white reference (ms) dark_inttime: Integration time dark reference (ms) sample_inttime: Integration time sample (ms) white_avgs: Number averaged measurements white reference dark_avgs: Number averaged measurements dark reference sample_avgs: Number averaged measurements sample white_boxcar: Boxcar width white reference dark_boxcar: Boxcar width dark reference sample_boxcar: Boxcar width sample reference","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract metadata from spectra files ‚Äî lr_get_metadata","text":"can customise type parallel processing used function future::plan() function. works operating systems, well high performance computing (HPC) environment. Similarly, can customise way progress shown progressr::handlers() functions (progress bar, acoustic feedback, nothing, etc.)","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_metadata.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Extract metadata from spectra files ‚Äî lr_get_metadata","text":"white_inttime, dark_inttime sample_inttime equal. normalised data may inaccurate otherwise.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_metadata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract metadata from spectra files ‚Äî lr_get_metadata","text":"White TE, Dalrymple RL, Noble DWA, O'Hanlon JC, Zurek DB, Umbers KDL. Reproducible research study biological coloration. Animal Behaviour. 2015 Aug 1;106:51-7 (doi:10.1016/j.anbehav.2015.05.007 ).","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract metadata from spectra files ‚Äî lr_get_metadata","text":"","code":"# \\donttest{ lr_get_metadata(system.file(\"testdata\", \"procspec_files\",                             package = \"lightr\"),                 ext = \"ProcSpec\") #> 4 files found; importing metadata: #>                    name       user            datetime  spec_model     spec_ID #> 1     OceanOptics_Linux       hugo 2016-03-16 13:18:31     USB4000  USB4C00008 #> 2   OceanOptics_Windows doutrelant 2015-12-04 10:29:14      JazUSB    JAZA2982 #> 3 OceanOptics_badencode       user 2016-12-02 20:39:12 USB2000Plus USB2+H06330 #> 4              whiteref      gomez 2018-08-02 15:56:19     USB4000  USB4C00008 #>   white_inttime dark_inttime sample_inttime white_avgs dark_avgs sample_avgs #> 1           200          200            200          5         5           5 #> 2            60           60             60         15        15          15 #> 3            20           20             20        100       100         100 #> 4           500          500            500          5         5           5 #>   white_boxcar dark_boxcar sample_boxcar #> 1            0           0             0 #> 2            0           0             0 #> 3            5           5             5 #> 4            0           0             0 # }"},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract spectral data from spectra files ‚Äî lr_get_spec","title":"Extract spectral data from spectra files ‚Äî lr_get_spec","text":"Finds imports reflectance/transmittance/absorbance data spectra files given location.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract spectral data from spectra files ‚Äî lr_get_spec","text":"","code":"lr_get_spec(   where = getwd(),   ext = \"txt\",   lim = c(300, 700),   decimal = \".\",   sep = NULL,   subdir = FALSE,   subdir.names = FALSE,   ignore.case = TRUE,   interpolate = TRUE )"},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract spectral data from spectra files ‚Äî lr_get_spec","text":"Folder files located (defaults current working directory). ext File extension searched , without \".\" (defaults txt). can also use character vector specify multiple file extensions. lim vector two numbers determining wavelength limits considered (defaults c(300, 700)). decimal Character used identify decimal plates (defaults .). sep Column delimiting characters considered addition default (: tab, space, \";\") subdir subdirectories within folder included search? (defaults FALSE). subdir.names subdirectory path included name spectra? (defaults FALSE). ignore.case extension search case insensitive? (defaults TRUE) interpolate Boolean indicated whether spectral data interpolated pruned every nanometre. Note option can work input data samples wavelengths. Defaults TRUE.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract spectral data from spectra files ‚Äî lr_get_spec","text":"data.frame, containing wavelengths first column individual imported spectral files subsequent columns.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_spec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract spectral data from spectra files ‚Äî lr_get_spec","text":"can customise type parallel processing used function future::plan() function. works operating systems, well high performance computing (HPC) environment. Similarly, can customise way progress shown progressr::handlers() functions (progress bar, acoustic feedback, nothing, etc.)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/lightr/reference/lr_get_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract spectral data from spectra files ‚Äî lr_get_spec","text":"","code":"spcs <- lr_get_spec(system.file(\"testdata\", package = \"lightr\"), ext = \"jdx\") #> 1 files found; importing spectra: head(spcs) #>    wl OceanOptics_period #> 1 300           154.3030 #> 2 301           129.2981 #> 3 302           115.9120 #> 4 303           122.5818 #> 5 304           125.9307 #> 6 305           152.3136"},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to parse spectra files that don't have a specific parser ‚Äî lr_parse_generic","title":"Generic function to parse spectra files that don't have a specific parser ‚Äî lr_parse_generic","text":"Generic function parse spectra files specific parser","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to parse spectra files that don't have a specific parser ‚Äî lr_parse_generic","text":"","code":"lr_parse_generic(filename, decimal = \".\", sep = NULL)"},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to parse spectra files that don't have a specific parser ‚Äî lr_parse_generic","text":"filename Path file parse decimal Character used identify decimal plates (defaults .). sep Column delimiting characters considered addition default (: tab, space, \";\")","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_generic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to parse spectra files that don't have a specific parser ‚Äî lr_parse_generic","text":"named list two elements: data: dataframe columns \"wl\", \"dark\", \"white\", \"scope\" \"processed\", order. metadata: character vector metadata including: user: Name spectrometer operator datetime: Timestamp recording format '%Y-%m-%d %H:%M:%S' UTC timezone. timezone missing source file, UTC time assumed (reproducibility purposes across computers different localtimes). spec_model: Model spectrometer spec_ID: Unique ID spectrometer white_inttime: Integration time white reference (ms) dark_inttime: Integration time dark reference (ms) sample_inttime: Integration time sample (ms) white_avgs: Number averaged measurements white reference dark_avgs: Number averaged measurements dark reference sample_avgs: Number averaged measurements sample white_boxcar: Boxcar width white reference dark_boxcar: Boxcar width dark reference sample_boxcar: Boxcar width sample reference","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_generic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function to parse spectra files that don't have a specific parser ‚Äî lr_parse_generic","text":"'processed' column computed official software provided .","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_generic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic function to parse spectra files that don't have a specific parser ‚Äî lr_parse_generic","text":"","code":"res_csv <- lr_parse_generic(   system.file(\"testdata\", \"spec.csv\", package = \"lightr\"),   sep = \",\" ) head(res_csv$data) #>       wl dark white scope processed #> 1 299.99   NA    NA    NA    10.013 #> 2 300.20   NA    NA    NA     7.331 #> 3 300.42   NA    NA    NA    12.082 #> 4 300.63   NA    NA    NA     7.949 #> 5 300.85   NA    NA    NA     5.962 #> 6 301.06   NA    NA    NA     7.525 # No metadata is extracted with this parser res_csv$metadata #>  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA  res_craic <- lr_parse_generic(   system.file(\"testdata\", \"CRAIC_export.txt\", package = \"lightr\") ) head(res_craic$data) #>       wl dark white scope processed #> 1 280.11   NA    NA    NA   13.3999 #> 2 280.28   NA    NA    NA   13.2646 #> 3 280.45   NA    NA    NA   13.4097 #> 4 280.62   NA    NA    NA   13.9000 #> 5 280.79   NA    NA    NA   13.5736 #> 6 280.96   NA    NA    NA   13.9723 # No metadata is extracted with this parser res_craic$metadata #>  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA"},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jaz.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse OceanInsight converted file ‚Äî lr_parse_jaz","title":"Parse OceanInsight converted file ‚Äî lr_parse_jaz","text":"Parse OceanInsight (formerly OceanOptics) converted file. https://www.oceaninsight.com/","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jaz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse OceanInsight converted file ‚Äî lr_parse_jaz","text":"","code":"lr_parse_jaz(filename)  lr_parse_jazirrad(filename)"},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jaz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse OceanInsight converted file ‚Äî lr_parse_jaz","text":"filename Path file parse","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jaz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse OceanInsight converted file ‚Äî lr_parse_jaz","text":"named list two elements: data: dataframe columns \"wl\", \"dark\", \"white\", \"scope\" \"processed\", order. metadata: character vector metadata including: user: Name spectrometer operator datetime: Timestamp recording format '%Y-%m-%d %H:%M:%S' UTC timezone. timezone missing source file, UTC time assumed (reproducibility purposes across computers different localtimes). spec_model: Model spectrometer spec_ID: Unique ID spectrometer white_inttime: Integration time white reference (ms) dark_inttime: Integration time dark reference (ms) sample_inttime: Integration time sample (ms) white_avgs: Number averaged measurements white reference dark_avgs: Number averaged measurements dark reference sample_avgs: Number averaged measurements sample white_boxcar: Boxcar width white reference dark_boxcar: Boxcar width dark reference sample_boxcar: Boxcar width sample reference","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jaz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse OceanInsight converted file ‚Äî lr_parse_jaz","text":"'processed' column computed official software provided .","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jaz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse OceanInsight converted file ‚Äî lr_parse_jaz","text":"","code":"res_jaz <- lr_parse_jaz(system.file(\"testdata\", \"jazspec.jaz\",                         package = \"lightr\")) head(res_jaz$data) #>         wl     dark    white    scope   processed #> 1 190.8535    0.000    0.000    0.000     0.00000 #> 2 191.2319    0.000    0.000    0.000     0.00000 #> 3 191.6103 1078.987 1156.225 1064.944   -18.18182 #> 4 191.9887 1181.970 1184.311 1062.603 -5099.91113 #> 5 192.3670 1149.203 1165.587 1074.306  -457.14148 #> 6 192.7453 1151.544 1179.630 1116.436  -125.00000 res_jaz$metadata #>  [1] \"jaz\"                 \"2011-08-29 16:23:13\" NA                    #>  [4] \"JAZA1479\"            \"24\"                  \"24\"                  #>  [7] \"24\"                  \"1\"                   \"1\"                   #> [10] \"1\"                   \"0\"                   \"0\"                   #> [13] \"0\"                    res_jazirrad <- lr_parse_jazirrad(system.file(\"testdata\", \"irrad.JazIrrad\",                                   package = \"lightr\")) head(res_jazirrad$data) #>         wl       dark white     scope processed #> 1 191.0163    0.00000    NA    0.0000         0 #> 2 191.3957    0.00000    NA    0.0000         0 #> 3 191.7751 -122.52458    NA -134.2367         0 #> 4 192.1545  -86.39326    NA -109.5543         0 #> 5 192.5339    0.00000    NA    0.0000         0 #> 6 192.9132  -30.52176    NA  -30.1772         0 res_jazirrad$metadata #>  [1] \"jaz\"                 \"2013-09-16 02:15:43\" NA                    #>  [4] \"JAZA2517\"            \"495\"                 \"495\"                 #>  [7] \"495\"                 \"3\"                   \"3\"                   #> [10] \"3\"                   \"5\"                   \"5\"                   #> [13] \"5\"                    res_usb4000 <- lr_parse_jaz(system.file(\"testdata\", \"OOusb4000.txt\",                             package = \"lightr\")) head(res_usb4000$data) #>       wl dark white scope processed #> 1 178.65   NA    NA    NA     0.000 #> 2 178.86   NA    NA    NA     0.000 #> 3 179.08   NA    NA    NA     0.000 #> 4 179.30   NA    NA    NA    93.625 #> 5 179.51   NA    NA    NA    73.016 #> 6 179.73   NA    NA    NA   402.632 res_usb4000$metadata #>  [1] \"Liliane\"             \"2008-01-14 17:36:35\" NA                    #>  [4] \"USB4A00428\"          \"20\"                  \"20\"                  #>  [7] \"20\"                  \"50\"                  \"50\"                  #> [10] \"50\"                  \"30\"                  \"30\"                  #> [13] \"30\"                   res_transmission <- lr_parse_jaz(   system.file(\"testdata\", \"FMNH6834.00000001.Master.Transmission\",                package = \"lightr\") ) head(res_transmission$data) #>       wl dark white scope processed #> 1 178.53   NA    NA    NA    95.380 #> 2 178.74   NA    NA    NA   675.528 #> 3 178.96   NA    NA    NA   -51.185 #> 4 179.18   NA    NA    NA     9.240 #> 5 179.39   NA    NA    NA  -417.232 #> 6 179.61   NA    NA    NA   380.121 res_transmission$metadata #>  [1] \"Valued Ocean Optics Customer\" \"2011-03-23 12:15:51\"          #>  [3] NA                             \"USB4C01507\"                   #>  [5] \"62\"                           \"62\"                           #>  [7] \"62\"                           \"20\"                           #>  [9] \"20\"                           \"20\"                           #> [11] \"5\"                            \"5\"                            #> [13] \"5\""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jdx.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse OceanInsight JCAMP-DX (.jdx) file ‚Äî lr_parse_jdx","title":"Parse OceanInsight JCAMP-DX (.jdx) file ‚Äî lr_parse_jdx","text":"Parse OceanInsight (formerly OceanOptics) JCAMP-DX (.jdx) file. https://www.oceaninsight.com/","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jdx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse OceanInsight JCAMP-DX (.jdx) file ‚Äî lr_parse_jdx","text":"","code":"lr_parse_jdx(filename)"},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jdx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse OceanInsight JCAMP-DX (.jdx) file ‚Äî lr_parse_jdx","text":"filename Path file parse","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jdx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse OceanInsight JCAMP-DX (.jdx) file ‚Äî lr_parse_jdx","text":"named list two elements: data: dataframe columns \"wl\", \"dark\", \"white\", \"scope\" \"processed\", order. metadata: character vector metadata including: user: Name spectrometer operator datetime: Timestamp recording format '%Y-%m-%d %H:%M:%S' UTC timezone. timezone missing source file, UTC time assumed (reproducibility purposes across computers different localtimes). spec_model: Model spectrometer spec_ID: Unique ID spectrometer white_inttime: Integration time white reference (ms) dark_inttime: Integration time dark reference (ms) sample_inttime: Integration time sample (ms) white_avgs: Number averaged measurements white reference dark_avgs: Number averaged measurements dark reference sample_avgs: Number averaged measurements sample white_boxcar: Boxcar width white reference dark_boxcar: Boxcar width dark reference sample_boxcar: Boxcar width sample reference","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jdx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse OceanInsight JCAMP-DX (.jdx) file ‚Äî lr_parse_jdx","text":"'processed' column computed lightr function lr_compute_processed().","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jdx.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse OceanInsight JCAMP-DX (.jdx) file ‚Äî lr_parse_jdx","text":"McDonald RS, Wilks PA. JCAMP-DX: Standard Form Exchange Infrared Spectra Computer Readable Form. Applied Spectroscopy. 1988;42(1):151-62.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_jdx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse OceanInsight JCAMP-DX (.jdx) file ‚Äî lr_parse_jdx","text":"","code":"res_jdx <- lr_parse_jdx(system.file(\"testdata\", \"OceanOptics_period.jdx\",                                     package = \"lightr\")) head(res_jdx$data) #>       wl      dark     white     scope processed #> 1 176.36 32822.795 32822.795 32822.795       NaN #> 2 176.58 32822.795 32822.795 32822.795       NaN #> 3 176.80 32822.795 32822.795 32822.795       NaN #> 4 177.02  1661.312  1606.017  1647.796  24.44344 #> 5 177.24  1654.349  1555.227  1660.083  -5.78479 #> 6 177.47  2568.562  2494.426  2585.356 -22.65296 res_jdx$metadata #>  [1] \"hugo\" NA     NA     NA     \"400\"  \"400\"  \"400\"  \"5\"    \"5\"    \"5\"    #> [11] \"0\"    \"0\"    \"0\""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_procspec.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse OceanInsight ProcSpec file ‚Äî lr_parse_procspec","title":"Parse OceanInsight ProcSpec file ‚Äî lr_parse_procspec","text":"Parse OceanInsight (formerly OceanOptics) ProcSpec file. https://www.oceaninsight.com/","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_procspec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse OceanInsight ProcSpec file ‚Äî lr_parse_procspec","text":"","code":"lr_parse_procspec(filename)"},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_procspec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse OceanInsight ProcSpec file ‚Äî lr_parse_procspec","text":"filename Path file parse","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_procspec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse OceanInsight ProcSpec file ‚Äî lr_parse_procspec","text":"named list two elements: data: dataframe columns \"wl\", \"dark\", \"white\", \"scope\" \"processed\", order. metadata: character vector metadata including: user: Name spectrometer operator datetime: Timestamp recording format '%Y-%m-%d %H:%M:%S' UTC timezone. timezone missing source file, UTC time assumed (reproducibility purposes across computers different localtimes). spec_model: Model spectrometer spec_ID: Unique ID spectrometer white_inttime: Integration time white reference (ms) dark_inttime: Integration time dark reference (ms) sample_inttime: Integration time sample (ms) white_avgs: Number averaged measurements white reference dark_avgs: Number averaged measurements dark reference sample_avgs: Number averaged measurements sample white_boxcar: Boxcar width white reference dark_boxcar: Boxcar width dark reference sample_boxcar: Boxcar width sample reference","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_procspec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse OceanInsight ProcSpec file ‚Äî lr_parse_procspec","text":"'processed' column computed official software provided .","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_procspec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse OceanInsight ProcSpec file ‚Äî lr_parse_procspec","text":"https://www.oceaninsight.com/support/faqs/software/","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_procspec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse OceanInsight ProcSpec file ‚Äî lr_parse_procspec","text":"","code":"res <- lr_parse_procspec(system.file(\"testdata\", \"procspec_files\",                                      \"OceanOptics_Linux.ProcSpec\",                                      package = \"lightr\")) head(res$data) #>         wl      dark     white     scope processed #> 1 176.3604 32822.795 32822.795 32822.795   0.00000 #> 2 176.5816 32822.795 32822.795 32822.795   0.00000 #> 3 176.8027 32822.795 32822.795 32822.795   0.00000 #> 4 177.0238  1483.549  1517.545  1496.656  38.55422 #> 5 177.2449  1492.150  1506.486  1510.991 131.42857 #> 6 177.4660  1965.640  1934.102  1976.290 -33.76623 res$metadata #>  [1] \"hugo\"                \"2016-03-16 13:18:31\" \"USB4000\"             #>  [4] \"USB4C00008\"          \"200\"                 \"200\"                 #>  [7] \"200\"                 \"5\"                   \"5\"                   #> [10] \"5\"                   \"0\"                   \"0\"                   #> [13] \"0\""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_spc.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse SPC binary file ‚Äî lr_parse_spc","title":"Parse SPC binary file ‚Äî lr_parse_spc","text":"Parse SPC binary file. (Used CRAIC https://www.microspectra.com/ OceanInsight https://www.oceaninsight.com/)","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_spc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse SPC binary file ‚Äî lr_parse_spc","text":"","code":"lr_parse_spc(filename)"},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_spc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse SPC binary file ‚Äî lr_parse_spc","text":"filename Path file parse","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_spc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse SPC binary file ‚Äî lr_parse_spc","text":"named list two elements: data: dataframe columns \"wl\", \"dark\", \"white\", \"scope\" \"processed\", order. metadata: character vector metadata including: user: Name spectrometer operator datetime: Timestamp recording format '%Y-%m-%d %H:%M:%S' UTC timezone. timezone missing source file, UTC time assumed (reproducibility purposes across computers different localtimes). spec_model: Model spectrometer spec_ID: Unique ID spectrometer white_inttime: Integration time white reference (ms) dark_inttime: Integration time dark reference (ms) sample_inttime: Integration time sample (ms) white_avgs: Number averaged measurements white reference dark_avgs: Number averaged measurements dark reference sample_avgs: Number averaged measurements sample white_boxcar: Boxcar width white reference dark_boxcar: Boxcar width dark reference sample_boxcar: Boxcar width sample reference","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_spc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse SPC binary file ‚Äî lr_parse_spc","text":"'processed' column computed official software provided .","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_spc.html","id":"in-development","dir":"Reference","previous_headings":"","what":"In development","title":"Parse SPC binary file ‚Äî lr_parse_spc","text":"Metadata parsing yet implemented file format.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_spc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse SPC binary file ‚Äî lr_parse_spc","text":"","code":"res <- lr_parse_spc(system.file(\"testdata\", \"compare\", \"CRAIC\", \"CRAIC.spc\",                                 package = \"lightr\")) head(res$data) #>         wl dark white scope processed #> 1 280.1123   NA    NA    NA  13.39989 #> 2 280.2819   NA    NA    NA  13.26464 #> 3 280.4515   NA    NA    NA  13.40967 #> 4 280.6211   NA    NA    NA  13.90005 #> 5 280.7906   NA    NA    NA  13.57364 #> 6 280.9602   NA    NA    NA  13.97229 res$metadata #>  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA"},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_trm.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Avantes binary file ‚Äî lr_parse_trm","title":"Parse Avantes binary file ‚Äî lr_parse_trm","text":"Parse Avantes binary file (TRM, ABS, ROH, DRK, REF, RAW8, RFL8 file extensions). https://www.avantes.com/products/spectrometers/","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_trm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Avantes binary file ‚Äî lr_parse_trm","text":"","code":"lr_parse_trm(filename)  lr_parse_abs(filename)  lr_parse_roh(filename)  lr_parse_rfl8(filename, specnum = 1L)  lr_parse_raw8(filename, specnum = 1L)  lr_parse_irr8(filename, specnum = 1L)"},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_trm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Avantes binary file ‚Äî lr_parse_trm","text":"filename Path file parse specnum Integer representing position spectrum read file. option makes sense AvaSoft8 files ignored cases.","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_trm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Avantes binary file ‚Äî lr_parse_trm","text":"named list two elements: data: dataframe columns \"wl\", \"dark\", \"white\", \"scope\" \"processed\", order. metadata: character vector metadata including: user: Name spectrometer operator datetime: Timestamp recording format '%Y-%m-%d %H:%M:%S' UTC timezone. timezone missing source file, UTC time assumed (reproducibility purposes across computers different localtimes). spec_model: Model spectrometer spec_ID: Unique ID spectrometer white_inttime: Integration time white reference (ms) dark_inttime: Integration time dark reference (ms) sample_inttime: Integration time sample (ms) white_avgs: Number averaged measurements white reference dark_avgs: Number averaged measurements dark reference sample_avgs: Number averaged measurements sample white_boxcar: Boxcar width white reference dark_boxcar: Boxcar width dark reference sample_boxcar: Boxcar width sample reference","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_trm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse Avantes binary file ‚Äî lr_parse_trm","text":"'processed' column computed lightr function lr_compute_processed().","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_trm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Avantes binary file ‚Äî lr_parse_trm","text":"","code":"res_trm <- lr_parse_trm(   system.file(\"testdata\", \"avantes_trans.TRM\", package = \"lightr\") ) head(res_trm$data) #>         wl   dark  white  scope processed #> 1 179.1006   2.40  72.50  23.65 30.313837 #> 2 179.6990  11.35 102.85  20.10  9.562842 #> 3 180.2974 -43.55  44.30 -26.75 19.123505 #> 4 180.8958 -22.15  62.55  -8.90 15.643448 #> 5 181.4942 -11.20  89.30   1.05 12.189054 #> 6 182.0925 -17.25  82.05  -6.20 11.127895 res_trm$metadata #>  [1] NA          NA          NA          \"0804016U1\" \"100\"       \"100\"       #>  [7] \"100\"       \"20\"        \"20\"        \"20\"        \"0\"         \"0\"         #> [13] \"0\"          res_roh <- lr_parse_roh(   system.file(\"testdata\", \"avantes_reflect.ROH\", package = \"lightr\") ) head(res_roh$data) #>         wl dark white    scope processed #> 1 275.2718   NA    NA 805.0000        NA #> 2 275.8698   NA    NA 816.3375        NA #> 3 276.4678   NA    NA 817.1125        NA #> 4 277.0657   NA    NA 812.4125        NA #> 5 277.6637   NA    NA 814.3125        NA #> 6 278.2616   NA    NA 817.6375        NA res_roh$metadata #>  [1] NA          NA          NA          \"1305084U1\" \"95\"        \"95\"        #>  [7] \"95\"        \"20\"        \"20\"        \"20\"        \"1\"         \"1\"         #> [13] \"1\"          # This parser has a unique `specnum` argument res_rfl8_1 <- lr_parse_rfl8(   system.file(\"testdata\", \"compare\", \"Avantes\", \"feather.RFL8\", package = \"lightr\"),   specnum = 1 ) head(res_rfl8_1$data) #>          wl      dark     white     scope processed #> 1  995.6217 -730.5000 -155.8333 -575.1667  27.03016 #> 2 1002.5419 3427.8333 4034.8333 3589.1667  26.57883 #> 3 1009.4579 6536.5000 7168.1665 6763.1665  35.88389 #> 4 1016.3698  508.5000 1351.8334  767.8333  30.75098 #> 5 1023.2774 1193.1666 2192.5000 1529.8334  33.68913 #> 6 1030.1808  895.1667 1988.8334 1220.8334  29.77751 res_rfl8_1$metadata #>  [1] NA                NA                NA                \"1511108U1\"       #>  [5] \"639.25732421875\" \"639.25732421875\" \"639.25732421875\" \"3\"               #>  [9] \"3\"               \"3\"               \"0\"               \"0\"               #> [13] \"0\"                res_rfl8_2 <- lr_parse_rfl8(   system.file(\"testdata\", \"compare\", \"Avantes\", \"feather.RFL8\", package = \"lightr\"),   specnum = 2 ) head(res_rfl8_2$data) #>         wl       dark    white      scope processed #> 1 174.7803 -14.500000  2.40000 -15.000000  -2.95858 #> 2 175.3842   3.166667 14.33333  14.400000 100.59701 #> 3 175.9881   7.000000 19.76667  17.000000  78.32898 #> 4 176.5919  13.266666 21.40000  20.633333  90.57377 #> 5 177.1958  -2.666667 18.26667   3.233333  28.18471 #> 6 177.7995  19.200001 40.16667  40.933334 103.65660 res_rfl8_2$metadata #>  [1] NA                 NA                 NA                 \"1501154U1\"        #>  [5] \"84.9001541137695\" \"84.9001541137695\" \"84.9001541137695\" \"10\"               #>  [9] \"10\"               \"10\"               \"1\"                \"1\"                #> [13] \"1\""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_ttt.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Avantes converted file ‚Äî lr_parse_ttt","title":"Parse Avantes converted file ‚Äî lr_parse_ttt","text":"Parse Avantes converted file. https://www.avantes.com/products/spectrometers/","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_ttt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Avantes converted file ‚Äî lr_parse_ttt","text":"","code":"lr_parse_ttt(filename)  lr_parse_trt(filename)"},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_ttt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Avantes converted file ‚Äî lr_parse_ttt","text":"filename Path file parse","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_ttt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Avantes converted file ‚Äî lr_parse_ttt","text":"named list two elements: data: dataframe columns \"wl\", \"dark\", \"white\", \"scope\" \"processed\", order. metadata: character vector metadata including: user: Name spectrometer operator datetime: Timestamp recording format '%Y-%m-%d %H:%M:%S' UTC timezone. timezone missing source file, UTC time assumed (reproducibility purposes across computers different localtimes). spec_model: Model spectrometer spec_ID: Unique ID spectrometer white_inttime: Integration time white reference (ms) dark_inttime: Integration time dark reference (ms) sample_inttime: Integration time sample (ms) white_avgs: Number averaged measurements white reference dark_avgs: Number averaged measurements dark reference sample_avgs: Number averaged measurements sample white_boxcar: Boxcar width white reference dark_boxcar: Boxcar width dark reference sample_boxcar: Boxcar width sample reference","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_ttt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse Avantes converted file ‚Äî lr_parse_ttt","text":"'processed' column computed official software provided .","code":""},{"path":"https://docs.ropensci.org/lightr/reference/lr_parse_ttt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Avantes converted file ‚Äî lr_parse_ttt","text":"","code":"res_ttt <- lr_parse_ttt(   system.file(\"testdata\", \"avantes_export.ttt\", package = \"lightr\") ) head(res_ttt$data) #>    wl dark white scope processed #> 1 300   NA    NA    NA    3.1487 #> 2 301   NA    NA    NA    3.1589 #> 3 302   NA    NA    NA    3.5700 #> 4 303   NA    NA    NA    3.9215 #> 5 304   NA    NA    NA    3.4034 #> 6 305   NA    NA    NA    3.7878 res_ttt$metadata #>  [1] NA          NA          NA          \"0804016U1\" \"100.00\"    \"100.00\"    #>  [7] \"100.00\"    \"20\"        \"20\"        \"20\"        \"0\"         \"0\"         #> [13] \"0\"          res_trt <- lr_parse_trt(   system.file(\"testdata\", \"avantes_export2.trt\", package = \"lightr\") ) head(res_trt$data) #>       wl dark white  scope processed #> 1 275.27   NA    NA 805.00        NA #> 2 275.87   NA    NA 816.34        NA #> 3 276.47   NA    NA 817.11        NA #> 4 277.07   NA    NA 812.41        NA #> 5 277.66   NA    NA 814.31        NA #> 6 278.26   NA    NA 817.64        NA res_trt$metadata #>  [1] NA          NA          NA          \"1305084U1\" \"95.00\"     \"95.00\"     #>  [7] \"95.00\"     \"20\"        \"20\"        \"20\"        \"1\"         \"1\"         #> [13] \"1\""},{"path":[]},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-171","dir":"Changelog","previous_headings":"","what":"lightr 1.7.1","title":"lightr 1.7.1","text":"CRAN release: 2024-03-21","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"internal-changes-1-7-1","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"lightr 1.7.1","text":"project now uses lintr ensure code always following current best coding practices R community ensure floating precision issues causing tests fail CRAN (@Bisaloon, #156)","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-180","dir":"Changelog","previous_headings":"","what":"lightr 1.8.0","title":"lightr 1.8.0","text":"lr_parse_irr8(), lr_parse_rfl8() lr_parse_raw8() now error provide file produced AvaSoft 8.2 tested properly versions AvaSoft 8.","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-170","dir":"Changelog","previous_headings":"","what":"lightr 1.7.0","title":"lightr 1.7.0","text":"CRAN release: 2022-05-14","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"minor-changes-1-7-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"lightr 1.7.0","text":"Errors low-level parsers now passed warnings high-level lr_get_XXX() functions instead completely silenced. IRR8 (irradiance files produced AvaSoft 8) now explicitly supported lr_get_spec(). alias added low-level parser: lr_parse_irr8().","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-162","dir":"Changelog","previous_headings":"","what":"lightr 1.6.2","title":"lightr 1.6.2","text":"CRAN release: 2021-11-08","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"minor-changes-1-6-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"lightr 1.6.2","text":"fix failing tests CRAN due unattached dependency","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-161","dir":"Changelog","previous_headings":"","what":"lightr 1.6.1","title":"lightr 1.6.1","text":"CRAN release: 2021-11-08","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"minor-changes-1-6-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"lightr 1.6.1","text":"fix failing tests CRAN caused non UTF-8 files","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-160","dir":"Changelog","previous_headings":"","what":"lightr 1.6.0","title":"lightr 1.6.0","text":"CRAN release: 2021-07-22","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"major-breaking-changes-1-6-0","dir":"Changelog","previous_headings":"","what":"Major breaking changes","title":"lightr 1.6.0","text":"date returned metadata (lr_get_metadata(), lr_convert_tocsv(metadata = TRUE) lr_parse_XXXX()) now datetime (UTC timezone format %Y-%m-%d %H:%M:%S). column name lr_get_metadata() updated date datetime reflect . Thanks Giancarlo Chiarenza report, Hao Ye, Laura DeCicco Elin Waring helpful comments timezones datetime formatting reproducibility.","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"minor-changes-1-6-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"lightr 1.6.0","text":"datetime parsing supported formats Files produced OceanInsight software (SpectraSuite) Spanish can now parsed)","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-150","dir":"Changelog","previous_headings":"","what":"lightr 1.5.0","title":"lightr 1.5.0","text":"CRAN release: 2021-06-19","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"major-breaking-changes-1-5-0","dir":"Changelog","previous_headings":"","what":"Major breaking changes","title":"lightr 1.5.0","text":"cores argument lr_get_spec(), lr_get_metadata(), lr_convert_tocsv() completely removed. already deprecated since lightr 1.0 (released CRAN 2020-01-27) lr_convert_tocsv() gains new metadata argument (defaults TRUE) determine metadata exported csv file well alongside spectral data.","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-14","dir":"Changelog","previous_headings":"","what":"lightr 1.4","title":"lightr 1.4","text":"CRAN release: 2021-03-21","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"minor-changes-and-bug-fixes-1-4","dir":"Changelog","previous_headings":"","what":"Minor changes and bug fixes","title":"lightr 1.4","text":"Output low-level parsers lr_parse_XXXX() now named list elements data metadata lr_parse_raw8() lr_parse_rfl8() now explicitly mention number spectra warnings instead generic ‚Äúmultiple spectra‚Äù lr_parse_generic() now makes sure data ordered increasing wavelengths, fixes bug reported @itamshab","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-13","dir":"Changelog","previous_headings":"","what":"lightr 1.3","title":"lightr 1.3","text":"CRAN release: 2020-06-30","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"minor-changes-1-3","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"lightr 1.3","text":"(mostly internal) compute_processed() function now named lr_compute_processed() disable hash tests Solaris (output still checked tests)","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-12","dir":"Changelog","previous_headings":"","what":"lightr 1.2","title":"lightr 1.2","text":"CRAN release: 2020-06-29","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"minor-changes-1-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"lightr 1.2","text":"fixed tests platform long-doubles (‚ÄònoLD‚Äô) restored tests 32bits machines spec_ID extraction Avantes exported files (ttt trt) now robust, meaning work files.","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-11","dir":"Changelog","previous_headings":"","what":"lightr 1.1","title":"lightr 1.1","text":"CRAN release: 2020-04-01","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"new-features-and-major-changes-1-1","dir":"Changelog","previous_headings":"","what":"New features and major changes","title":"lightr 1.1","text":"date column metadata now always formatted ISO 8601. lightr can now import AvaSoft8 files (test files provided M.D.¬†Shawkey L. Swierk), via functions lr_parse_rfl8()/lr_parse_raw8(). lightr can correctly imports TRM files AvaSoft 6.0 (previously supported files AvaSoft 7.0). lightr can now import binary .spc files (via lr_parse_spc() parser). format used OceanInsight CRAIC.","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"minor-changes-1-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"lightr 1.1","text":"new test suite different locale (case fr_FR.UTF-8) ensure parsing locale-independent. warnings CRAN build system platforms don‚Äôt support markdown 2 fixed. new, stricter tests various file formats. jdx files saved locale uses , decimal separator now parsed correctly. Avantes exported files non-English locales (ttt trt files) now parsed correctly (regression compared pavo‚Äôs pavo::getspec()). Thanks . Fargevieille reporting issue providing test file.","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-10","dir":"Changelog","previous_headings":"","what":"lightr 1.0","title":"lightr 1.0","text":"CRAN release: 2020-01-27","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"new-features-and-major-changes-1-0","dir":"Changelog","previous_headings":"","what":"New features and major changes","title":"lightr 1.0","text":"parallel processing now relies future package, offers windows high performance computing (HPC) environments support. progress bar produced progressr package can customised well. lr_parse_generic() (thus lr_get_spec()) now works non-UTF8 files (regression compared pavo‚Äôs pavo::getspec()). lr_get_spec() now new interpolate argument determine whether want data interpolated pruned every nm .","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"minor-changes-1-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"lightr 1.0","text":"readBin() (binary Avantes parser) now explicit endian value, making package portable platform use big endians. documentation updated follow rebranding OceanOptics OceanInsight. vignette chunks use pavo now run package available. savetime field now extracted converted avantes files (available).","code":""},{"path":"https://docs.ropensci.org/lightr/news/index.html","id":"lightr-01","dir":"Changelog","previous_headings":"","what":"lightr 0.1","title":"lightr 0.1","text":"CRAN release: 2019-11-19 First release.","code":""}]
